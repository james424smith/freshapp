"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _deepmerge = _interopRequireDefault(require("deepmerge"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const isStringified = str => {
  try {
    JSON.parse(str);
    return true;
  } catch (e) {
    return false;
  }
};

class AsyncDict {
  size() {
    return this.store.size;
  }

  getStore() {
    return new Map(this.store);
  }

  constructor() {
    _defineProperty(this, "store", void 0);

    this.store = new Map();
  }

  getItem(k, cb) {
    var _this = this;

    return _asyncToGenerator(function* () {
      const val = _this.store.get(k) || null;
      if (cb) cb(null, val);
      return val;
    })();
  }

  setItem(k, v, cb) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      _this2.store.set(k, v);

      if (cb) cb(null);
    })();
  }

  removeItem(k, cb) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      _this3.store.delete(k);

      if (cb) cb(null);
    })();
  }

  clear(cb) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      _this4.store.clear();

      if (cb) cb(null);
    })();
  }

  getAllKeys(cb) {
    var _this5 = this;

    return _asyncToGenerator(function* () {
      const keys = Array.from(_this5.store.keys());
      if (cb) cb(null, keys);
      return keys;
    })();
  }

  multiGet(keys, cb) {
    var _this6 = this;

    return _asyncToGenerator(function* () {
      const requested = keys.map(k => [k, _this6.store.get(k) || null]);
      if (cb) cb(null, requested);
      return requested;
    })();
  }

  multiSet(entries, cb) {
    var _this7 = this;

    return _asyncToGenerator(function* () {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = entries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          const _step$value = _slicedToArray(_step.value, 2),
                key = _step$value[0],
                value = _step$value[1];

          _this7.store.set(key, value);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      if (cb) cb(null);
    })();
  }

  multiRemove(keys, cb) {
    var _this8 = this;

    return _asyncToGenerator(function* () {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = keys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          const key = _step2.value;

          _this8.store.delete(key);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      if (cb) cb(null);
    })();
  }

}

class MockAsyncStorage extends AsyncDict {
  mergeItem(key, value, cb) {
    var _this9 = this;

    return _asyncToGenerator(function* () {
      const item = yield _this9.getItem(key);
      if (!item) throw new Error(`No item with ${key} key`);
      if (!isStringified(item)) throw new Error(`Invalid item with ${key} key`);
      if (!isStringified(value)) throw new Error(`Invalid value to merge with ${key}`);
      const itemObj = JSON.parse(item);
      const valueObj = JSON.parse(value);
      const merged = (0, _deepmerge.default)(itemObj, valueObj);
      yield _this9.setItem(key, JSON.stringify(merged));
      if (cb) cb(null);
    })();
  }

  multiMerge(entries, cb) {
    var _this10 = this;

    return _asyncToGenerator(function* () {
      const errors = [];
      /* eslint no-restricted-syntax: "off" */

      /* eslint no-await-in-loop: "off" */

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = entries[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          const _step3$value = _slicedToArray(_step3.value, 2),
                key = _step3$value[0],
                value = _step3$value[1];

          try {
            if (value) {
              yield _this10.mergeItem(key, value);
            }
          } catch (err) {
            errors.push(err);
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      if (errors.length) {
        if (cb) cb(errors);
        return Promise.reject(errors);
      }

      if (cb) cb(null);
      return Promise.resolve();
    })();
  }

  flushGetRequests() {}

}

var _default = MockAsyncStorage;
exports.default = _default;