"use strict";

var _index = _interopRequireDefault(require("../index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const storage = new _index.default();
describe('Async Storage Tests', () => {
  it('#setItem',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    yield storage.setItem('foo', 'bar');
    const store = storage.getStore();
    expect(store.get('foo')).toEqual('bar');
  }));
  it('#getItem',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    const foo = yield storage.getItem('foo');
    expect(foo).toEqual('bar');
  }));
  it('#getItem returns null if item not in store',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    const foo = yield storage.getItem('baz');
    expect(foo).toEqual(null);
  }));
  it('#removeItem',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    yield storage.removeItem('foo');
    const store = storage.getStore();
    expect(store.has('foo')).toBeFalsy();
  }));
  it('#setItem callback',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    const cb = jest.fn();
    yield storage.setItem('foo', 'bar', cb);
    expect(cb).toBeCalledWith(null);
  }));
  it('#getItem callback',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    const cb = jest.fn();
    yield storage.getItem('foo', cb);
    expect(cb).toBeCalledWith(null, 'bar');
  }));
  it('#removeItem callback',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    const cb = jest.fn();
    yield storage.removeItem('foo', cb);
    expect(cb).toBeCalledWith(null);
  }));
  it('#mergeItem',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    const UID123object = {
      name: 'Chris',
      age: 30,
      traits: {
        hair: 'brown',
        eyes: 'brown'
      }
    };
    const UID123delta = {
      age: 31,
      traits: {
        eyes: 'blue',
        shoe_size: 10
      }
    };
    yield storage.setItem('UID123', JSON.stringify(UID123object));
    yield storage.mergeItem('UID123', JSON.stringify(UID123delta));
    const merged = (yield storage.getItem('UID123')) || '';
    expect(JSON.parse(merged)).toEqual({
      name: 'Chris',
      age: 31,
      traits: {
        shoe_size: 10,
        hair: 'brown',
        eyes: 'blue'
      }
    });
  }));
  it('#mergeItem callback',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    const cb = jest.fn();
    const UID123object = {
      name: 'Chris',
      age: 30,
      traits: {
        hair: 'brown',
        eyes: 'brown'
      }
    };
    const UID123delta = {
      age: 31,
      traits: {
        eyes: 'blue',
        shoe_size: 10
      }
    };
    yield storage.setItem('UID123', JSON.stringify(UID123object));
    yield storage.mergeItem('UID123', JSON.stringify(UID123delta), cb);
    expect(cb).toBeCalledWith(null);
  }));
  it('#clear',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    yield storage.setItem('foo', 'bar');
    yield storage.clear();
    const store = storage.store;
    expect(store.size).toEqual(0);
  }));
  it('#clear cb',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    const cb = jest.fn();
    yield storage.clear(cb);
    expect(cb).toBeCalledWith(null);
  }));
  it('#getAllKeys',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    yield storage.setItem('foo', 'foo');
    yield storage.setItem('bar', 'bar');
    const keys = yield storage.getAllKeys();
    expect(keys).toEqual(['foo', 'bar']);
  }));
  it('#getAllKeys cb',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    const cb = jest.fn();
    yield storage.getAllKeys(cb);
    expect(cb).toBeCalledWith(null, ['foo', 'bar']);
  }));
  it('#multiGet and the callback',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    const cb = jest.fn();
    const values = yield storage.multiGet(['foo', 'bar', 'baz'], cb);
    expect(values).toEqual([['foo', 'foo'], ['bar', 'bar'], ['baz', null]]);
    expect(cb).toBeCalledWith(null, [['foo', 'foo'], ['bar', 'bar'], ['baz', null]]);
  }));
  it('#multiSet and the callback',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    const cb = jest.fn();
    yield storage.multiSet([['foo', 'bar'], ['baz', 'bar']], cb);
    const store = storage.store;
    expect(store.get('foo')).toEqual('bar');
    expect(store.get('baz')).toEqual('bar');
    expect(cb).toBeCalledWith(null);
  }));
  it('#multiRemove and callback',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    const cb = jest.fn();
    yield storage.multiRemove(['foo', 'baz'], cb);
    const store = storage.store;
    expect(store.get('foo')).toBeUndefined();
    expect(store.get('baz')).toBeUndefined();
    expect(cb).toBeCalledWith(null);
  }));
  it('#multiMerge and callback',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    const cb = jest.fn(); // first user, initial values

    const UID234object = {
      name: 'Chris',
      age: 30,
      traits: {
        hair: 'brown',
        eyes: 'brown'
      } // first user, delta values

    };
    const UID234delta = {
      age: 31,
      traits: {
        eyes: 'blue',
        shoe_size: 10
      } // second user, initial values

    };
    const UID345object = {
      name: 'Marge',
      age: 25,
      traits: {
        hair: 'blonde',
        eyes: 'blue'
      } // second user, delta values

    };
    const UID345delta = {
      age: 26,
      traits: {
        eyes: 'green',
        shoe_size: 6
      }
    };
    const multiSetPairs = [['UID234', JSON.stringify(UID234object)], ['UID345', JSON.stringify(UID345object)]];
    const multiMergePairs = [['UID234', JSON.stringify(UID234delta)], ['UID345', JSON.stringify(UID345delta)]];
    yield storage.clear();
    yield storage.multiSet(multiSetPairs);
    yield storage.multiMerge(multiMergePairs, cb);
    const items = yield storage.multiGet(['UID234', 'UID345']);
    expect(JSON.parse(items[0][1] || '')).toEqual({
      name: 'Chris',
      age: 31,
      traits: {
        shoe_size: 10,
        hair: 'brown',
        eyes: 'blue'
      }
    });
    expect(JSON.parse(items[1][1] || '')).toEqual({
      name: 'Marge',
      age: 26,
      traits: {
        shoe_size: 6,
        hair: 'blonde',
        eyes: 'green'
      }
    });
    expect(cb).toBeCalledWith(null);
  }));
});